<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>解决 VirtualBox 升级导致 Vagrant 无法启动的问题</title>
      <link href="/77e0579c.html"/>
      <url>/77e0579c.html</url>
      
        <content type="html"><![CDATA[<p>今天把 VirtualBox 给升级到了 <code>6.1.30</code> 之后，发现 Homestead 无法启动了，报错如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">➜  ~ vm upBringing machine <span class="token string">'homestead'</span> up with <span class="token string">'virtualbox'</span> provider<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">&gt;</span> homestead: Checking <span class="token keyword">if</span> box <span class="token string">'laravel/homestead'</span> version <span class="token string">'11.5.0'</span> is up to date<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">&gt;</span> homestead: Clearing any previously <span class="token builtin class-name">set</span> network interfaces<span class="token punctuation">..</span>.The IP address configured <span class="token keyword">for</span> the host-only network is not within theallowed ranges. Please update the address used to be within the allowedranges and run the <span class="token builtin class-name">command</span> again.  Address: <span class="token number">192.168</span>.10.10  Ranges: <span class="token number">192.168</span>.56.0/21Valid ranges can be modified <span class="token keyword">in</span> the /etc/vbox/networks.conf file. For<span class="token function">more</span> information including valid <span class="token function">format</span> see:  https://www.virtualbox.org/manual/ch06.html<span class="token comment">#network_hostonly</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>去到 <code>https://www.virtualbox.org/manual/ch06.html#network_hostonly</code> 这个地址已经给出了相关的解决办法：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">mkdir</span> /etc/vbox<span class="token function">sudo</span> <span class="token function">vim</span> /etc/vbox/networks.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>并将以下内容写入到 <code>/etc/vbox/networks.conf</code> 即可解决：</p><pre class="line-numbers language-none"><code class="language-none">* 10.0.0.0/8 192.168.0.0/16* 2001::/64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202201161129832.png"></p>]]></content>
      
      
      <categories>
          
          <category> 排错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Homestead </tag>
            
            <tag> VirtualBox </tag>
            
            <tag> Vagrant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS 上使用 VirtualBox 安装 OpenWRT</title>
      <link href="/7d336898.html"/>
      <url>/7d336898.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>临近年关了，由于一定的原因春节期间需要背着笔记本到处走，就提前收拾了一下笔记本：</p><ol><li>把磁盘给格了，干干净净的。</li><li>重新安装了系统，升级到了最新版，舒服。</li><li>布置平时开发需要用到的环境和软件等。</li><li>OpenWRT 必须安排上，懂得都懂。</li></ol></blockquote><p>平时在家里都是直接在我的 J4125 上全局 OpenWRT，但笔记本的网络环境还是安排到本地虚拟机里比较方便。</p><p>我是用的 eSir 编译的固件，下载好，把 <code>.gz</code> 解压成 <code>.img</code>，如果你是下载的 OpenWRT 官网的镜像则不需要了。</p><h2 id="准备镜像"><a href="#准备镜像" class="headerlink" title="准备镜像"></a>准备镜像</h2><p>OpenWRT 的 <code>.img</code> 文件需要先转换成 VirtualBox 所能识别的 <code>.vdi</code> 虚拟硬盘文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">VBoxManage convertfromraw --format VDI openwrt-spp-winter<span class="token punctuation">\</span><span class="token punctuation">[</span><span class="token number">2022</span><span class="token punctuation">\</span><span class="token punctuation">]</span>-x86-64-generic-squashfs-uefi.img openwrt.vdi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到如下信息代表没啥问题：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Converting from raw image <span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token string">"openwrt-spp-winter[2022]-x86-64-generic-squashfs-uefi.img"</span> to <span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token string">"openwrt.vdi"</span><span class="token punctuation">..</span>.Creating dynamic image with size <span class="token number">541359616</span> bytes <span class="token punctuation">(</span>517MB<span class="token punctuation">)</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="VirtualBox-设置"><a href="#VirtualBox-设置" class="headerlink" title="VirtualBox 设置"></a>VirtualBox 设置</h2><h3 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h3><p>打开 VirtualBox ，然后点击 <code>新建</code> 来新建一个虚拟机。</p><ul><li>名称可以随意填写；</li><li>类型选择 <code>Linux</code>；</li><li>版本选择 <code>Linux 2.6/3.x/4.x(64-bit)</code>。</li></ul><p>点击 <code>继续</code>。</p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202201161049374.png"></p><p>内存默认给到 1024 M 就足够了，点击 <code>继续</code>。</p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202201161050509.png"></p><p>接下来，先把刚刚转换好的 <code>openwrt.vdi</code> 文件移动到 <code>/Users/lvxc/VirtualBox VMs/OpenWRT</code>，这个路径就是正在创建的虚拟机的位置。</p><p>在 <code>虚拟硬盘</code> 窗口里，选择 <code>使用已有的虚拟硬盘文件</code>，点击右侧的 <code>文件</code> 图标弹出虚拟介质管理器，点击 <code>注册</code> ，选择 <code>openwrt.vdi</code>，点击 <code>选择</code>，点击 <code>创建</code>，即可完成虚拟机的创建。</p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202201161050019.png"></p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202201161050594.png"></p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202201161050556.png"></p><h3 id="虚拟机设置"><a href="#虚拟机设置" class="headerlink" title="虚拟机设置"></a>虚拟机设置</h3><h4 id="VirtualBox-设置-1"><a href="#VirtualBox-设置-1" class="headerlink" title="VirtualBox 设置"></a>VirtualBox 设置</h4><p>在 VirtualBox 的菜单栏里，点击 <code>管理</code>，在弹出来的 <code>主机网络管理器</code> 窗口中点击 <code>创建</code> ，点击 <code>关闭</code>，这时候我们就创建了一个 <code>仅主机(Host-only) 网络适配器</code>。</p><p>![](/Users/lvxc/Library/Application Support/typora-user-images/image-20220115221154848.png</p><p>!(/Users/lvxc/Library/Application Support/typora-user-images/image-20220115221128330.png)</p><h4 id="虚拟机网络设置"><a href="#虚拟机网络设置" class="headerlink" title="虚拟机网络设置"></a>虚拟机网络设置</h4><p>在虚拟机 <code>OpenWRT</code> 的 <code>设置</code> 中，选择 <code>网络</code> ，将 <strong>网卡 1</strong> 的连接方式设置为 <code>桥接网卡</code>。</p><ul><li><code>界面名称</code> 设置为当前笔记本连接网络的方式，也就是 <code>en0: Wi-Fi(AirPort)</code>。</li><li><code>高级</code> - <code>控制芯片</code> 选择 <code>Intel PRO/1000 MT 服务器（82545EM）</code>。</li><li><code>高级</code> - <code>混杂模式</code> 选择 <code>全部允许</code>。</li></ul><p>点击 <code>OK</code> 保存，并启动虚拟机。</p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202201161050124.png"></p><h3 id="修改网络"><a href="#修改网络" class="headerlink" title="修改网络"></a>修改网络</h3><p>输入以下命令，将 IP 修改成同一网段里的不重复的 IP，比如我这里用  <code>192.168.1.100</code> ，重新启动虚拟机：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">uci <span class="token builtin class-name">set</span> network.lan.ipaddr<span class="token operator">=</span><span class="token string">'192.168.1.100'</span>uci commit<span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虚拟机重启以后，便可以在浏览器里输入 <code>192.168.1.100</code> 来访问 OpenWRT 的 web 控制界面了，如果没有修改过密码，默认为没有密码。</p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202201161050359.png"></p><p>在 <code>网络</code> - <code>接口</code> - <code>LAN</code> 中，设置 <code>IPv4 网关</code> 为当前网络的网关 <code>192.168.1.1</code>，然后在下面的 <code>基本设置</code> 里勾选 <code>忽略此接口</code>，保存并应用。</p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202201161050163.png"></p><p>在 <code>网络</code> - <code>Turbo ACC 网络加速</code> 中勾选 <code>DNS 缓存</code> 并设置上游 DNS 服务器，保存并应用。</p><p>看一下 <code>网络</code> - <code>DHCP/DNS</code> 里的 <code>DNS 转发</code> 是不是 <code>127.0.0.1#5333</code>，是这个就没问题了。</p><h3 id="物理机使用"><a href="#物理机使用" class="headerlink" title="物理机使用"></a>物理机使用</h3><p>至此，虚拟机里的 OpenWRT 就算是基本可以用了，在 Mac 主机上，可以通过手动设置 IP 地址，将 <code>路由</code> 设置为 OpenWRT 的 IP 地址，然后添加一个 DNS 为 OpenWRT 的地址，便可以走 OpenWRT 了。</p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202201161051054.png"></p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202201161051437.png"></p><p>OK，关机备用。</p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> VirtualBox </tag>
            
            <tag> OpenWRT </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 8 部署 Yapi</title>
      <link href="/2a8401d8.html"/>
      <url>/2a8401d8.html</url>
      
        <content type="html"><![CDATA[<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><ol><li><p>查看可用的模块，<code>d</code> 代表默认的版本：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum module list nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="https://coderlxc-1256179520.file.myqcloud.com/20210818/BfkYTI.png" alt="image-20210818145614914"></p></li><li><p>安装默认版本</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum module <span class="token function">install</span> nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置 NPM 淘宝镜像</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><ol><li><p>创建 yum 配置文件</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> /etc/yum.repos.d/mongodb-org-4.2.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编辑配置文件填入以下内容：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>mongodb-org-4.2<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>MongoDB Repository<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://repo.mongodb.org/yum/redhat/<span class="token variable">$releasever</span>/mongodb-org/4.2/x86_64/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://www.mongodb.org/static/pgp/server-4.2.asc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装 MongoDB</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> -y mongodb-org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动 MongoDB 服务</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl start mongod<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置开机启动</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl <span class="token builtin class-name">enable</span> mongod<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看是否配置开机自启成功</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl list-unit-files<span class="token operator">|</span><span class="token function">grep</span> mongod<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="Yapi"><a href="#Yapi" class="headerlink" title="Yapi"></a>Yapi</h2><ol><li><p>安装 Yapi</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> -g yapi-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动可视化安装服务</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yapi server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>填写相关配置信息后，点击<code>开始部署</code>，等待完成后记住<code>管理员邮箱账号</code>和<code>密码</code></p></li></ol><p><img src="https://coderlxc-1256179520.file.myqcloud.com/20210818/lWVmYf.png" alt="image-20210818150949211"></p><ol start="4"><li><p>切换到 Yapi 的部署位置启动服务，此时可通过 web 来访问 Yapi 服务了</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> /root/my-yapi <span class="token operator">&amp;&amp;</span> node vendors/server/app.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="PM2-守护进程"><a href="#PM2-守护进程" class="headerlink" title="PM2 守护进程"></a>PM2 守护进程</h2><ol><li><p>安装 PM2</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> -y pm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用 PM2 启动 Yapi，并设置占用内存超过 500M 后重新启动服务：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pm2 start /root/my-yapi/vendors/server/app.js -n yapi --max-memory-restart 500M<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Yapi </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 部署 Gogs 私有代码仓库</title>
      <link href="/7ffb7ac.html"/>
      <url>/7ffb7ac.html</url>
      
        <content type="html"><![CDATA[<h2 id="设置-Git-用户"><a href="#设置-Git-用户" class="headerlink" title="设置 Git 用户"></a>设置 Git 用户</h2><ol><li>创建 Git 用户</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adduser <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>给 <code>/etc/sudoers</code> 添加写权限</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +w /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>把 Git 用户加进 <code>sudoers</code>，并设置 sudo 的时候不用输入密码</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span>     <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>       NOPASSWD:ALL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="搭建-Gogs"><a href="#搭建-Gogs" class="headerlink" title="搭建 Gogs"></a>搭建 Gogs</h2><ol><li>进入到 Git 用户的家目录并下载 Gogs 的进制包，最新版本的二进制包可以去<a href="https://gogs.io/docs/installation/install_from_binary">官网</a>查看。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/git <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> https://dl.gogs.io/0.12.3/gogs_0.12.3_linux_amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>解压</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf gogs_0.12.3_linux_amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>进入到刚刚解压好的 gogs 目录，使用 Git 用户临时启动 Gogs 服务</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> gogs <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> -u <span class="token function">git</span> ./gogs web<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>创建一个 Gogs 数据库</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> gogs <span class="token keyword">default</span> <span class="token keyword">CHARSET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>创建一个只有本地可以连接的 <code>gogs</code> 用户，密码是 <code>password</code>，<strong>注意将密码修改你自己的</strong>。</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'gogs'</span><span class="token variable">@'127.0.0.1'</span> identified <span class="token keyword">by</span> <span class="token string">'password'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>给 <code>gogs</code> 用户分配 <code>gogs</code> 数据库的所有权限</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">on</span> gogs<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'gogs'</span><span class="token variable">@'127.0.0.1'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时候就可以通过服务器的 <code>IP:3000</code> 访问了 Gogs 的 Web 页面了，我用 Nginx 配了反向代理，所以直接访问 <code>IP</code> 即可。</p><p>在 Web 页面上配置好<strong>数据库信息</strong>、<strong>仓库根目录</strong>、<strong>运行系统用户</strong>等信息，点击<code>立即安装</code>即可。</p><p>关于<code>管理员账号设置</code>，可以这个页面中直接设置，也可以安装完成以后再去注册，Gogs 的规则是：<strong>第一个注册的用户</strong>就是管理员。</p><p>如下是我的配置：</p><p><img src="https://coderlxc-1256179520.file.myqcloud.com/20210812/dI4Ob8.png" alt="image-20210812105425086"></p><h2 id="把-Gogs-作为服务运行并配置开机自启动"><a href="#把-Gogs-作为服务运行并配置开机自启动" class="headerlink" title="把 Gogs 作为服务运行并配置开机自启动"></a>把 Gogs 作为服务运行并配置开机自启动</h2><ol><li>把 Gogs 官方提供的 <code>gogs.service</code> 模板复制到 <code>/etc/systemd/system</code> 目录下：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /home/git/gogs/scripts/systemd/gogs.service /etc/systemd/system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>修改 <code>gogs.service</code> 模板，如果你是按照上面的步骤操作的则没有什么需要修改的。</li><li>重新加载 <code>systemd</code>:</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>启动 Gogs 服务</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start gogs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>加入开机自启动</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> gogs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Gogs </tag>
            
            <tag> 代码仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Homestead 配置 Xdebug 3 调试 Web 页面</title>
      <link href="/f57e8b7a.html"/>
      <url>/f57e8b7a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下内容基于：</p><ul><li>Homestead v13.0.1</li><li>PHP 8.0</li><li>Xdebug v3.0.4</li><li>Chrome 96.0.4664.110</li><li>Chrome Extension: Xdebug Helper 1.6.1</li></ul></blockquote><p>首先进入到 Homestead 里，切换到想要使用的 PHP 版本上，执行 <code>php -v</code> 查看信息。</p><p>如果没有 Xdebug 字样，则需要执行 <code>sudo phpenmod xdebug</code>来开启动 xdebug：</p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202112251242520.png"></p><p>查看对应版本 PHP 的 xdebug 配置文件位置：</p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202112251242639.png"></p><p>编辑这个配置文件，在文件末尾添加以下两行（如果你的 Xdebug 主版本号是 2 的话，这里的配置项会不同），保存退出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xdebug.client_host<span class="token operator">=</span><span class="token number">192.168</span>.10.1xdebug.mode<span class="token operator">=</span>debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行 <code>sudo service php8.0-fpm restart</code>重启 FPM。</p><p>在 PHPStorm 里设置里，配置一个远程 CLI 解释器，选择 <code>Vagrant</code>:</p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202112251242273.png"></p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202112251242446.png"></p><p><code>Vagrant 实例文件夹</code> 选择 Homestead 文件夹所在位置：</p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202112251243072.png"></p><p>前往 Chrome 应用商店下载安装 <a href="https://chrome.google.com/webstore/detail/xdebug-helper/eadndfjplgieldjbigjakmdgkmoaaaoc">Xdebug helper - Chrome 网上应用店</a>， 打开配置页面，配置 PHPStorm 的 IDE Key，然后开启 Debug 模式：</p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202112251243821.png"></p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202112251243126.png"></p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202112251230024.png"></p><p>在代码里下个断点，触发断点后 PHPStorm 里会弹出如下窗口，选择<code>手动选择本文件或项目</code>后点击<code>接受</code>：</p><p><img src="https://raw.githubusercontent.com/lvxianchao/images/main/images/202112251243177.png"></p><p>再次进入 PHPStorm 设置，选择 <code>PHP &gt; 服务器</code> 可以看到刚刚配置的服务器，将<strong>顶层目录</strong>映射正确后即可正常 Debug：</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Homestead </tag>
            
            <tag> Xdebug </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
